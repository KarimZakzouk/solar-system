name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature-branch-A'

env:
  MONGO_URI: ${{secrets.MONGO_URI}}
  MONGO_USERNAME: ${{secrets.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
jobs:
    unit-testing:
        name: Unit Testing
        strategy:
          matrix:
            node-version: [18, 19, 20]
            os: [ubuntu-latest, windows-latest, macos-latest]

            exclude:
              - os: windows-latest
                node-version: 18
        runs-on: ${{ matrix.os }}

        steps:
        - name: Checkout Repository
          uses: actions/checkout@v5

        - name: Setup NodeJS Version - ${{ matrix.node-version }}
          uses: actions/setup-node@v4.4.0
          with:
            node-version: ${{ matrix.node-version }}
    
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: Nodejs-unit-testing-step
          run: npm test

        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result-${{ matrix.os }}-${{ matrix.node-version }}
            path: test-results.xml
            retention-days: 1

    code-coverage:
      name: Code Coverage
      # needs: unit-testing
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v5

        - name: Setup NodeJS
          uses: actions/setup-node@v4.4.0
          with:
            node-version: 18

        - name: Install Dependencies
          run: npm install

        - name: Run Code Coverage
          continue-on-error: true
          run: npm run coverage

        - name: Archive Coverage Report
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Coverage-Report
            path: coverage/
            retention-days: 1
    docker-build:
      name: Docker Build
      needs: code-coverage
      permissions:
        packages: write

      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v5

        - name: Log in to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_TOKEN }}

        - name: GHCR Login
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Build Docker Image
          uses: docker/build-push-action@v6
          with:
            push: false
            tags: |
              ghcr.io/${{ secrets.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

        - name: Test Docker Image
          run: |
            docker images
            
            # Start the container
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=${{ secrets.MONGO_URI }} \
              -e MONGO_USERNAME=${{ secrets.MONGO_USERNAME }} \
              -e MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
              ghcr.io/${{ secrets.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

            # Wait for container to start
            sleep 15
            
            # Get container IP
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo "Container IP: $IP"
            
            # Check if container is running
            docker ps
            
            # Check container logs
            echo "Container logs:"
            docker logs solar-system-app
            
            echo "Testing the application..."
            # Test the health endpoint
            response=$(curl -s http://127.0.0.1:3000/live)
            echo "Response: $response"
            if [[ $response == *"live"* ]]; then
              echo "Health check passed!"
            else
              echo "Health check failed!"
              docker logs solar-system-app
              exit 1
            fi

        - name: Push Docker Image
          uses: docker/build-push-action@v6
          with:
            push: true
            tags: |
              docker.io/${{ secrets.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
              ghcr.io/${{ secrets.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

    terraform:
      name: Terraform Deployment
      needs: docker-build
      runs-on: ubuntu-latest
      environment: production
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v5

        - name: Login to AWS
          uses: aws-actions/configure-aws-credentials@v4.3.1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3.1.2
          with:
            terraform_version: 1.5.7

        - name: Terraform Init
          run: terraform init
          working-directory: ./Terraform

        - name: Terraform Plan
          run: terraform plan
          working-directory: ./Terraform

        - name: Terraform Apply
          run: terraform apply -auto-approve
          working-directory: ./Terraform
    deploy:
      needs: terraform
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v5

        - name: Login to AWS
          uses: aws-actions/configure-aws-credentials@v4.3.1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        - name: Update kubeconfig
          run: |
            aws eks update-kubeconfig --name otel-cluster --region us-east-1 

        - name: Setup kubectl
          uses: statsig-io/kubectl-via-eksctl@main
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: us-east-1
            cluster-name: otel-cluster

        - name: Create Base64-encoded K8s Secret
          run: |
            kubectl apply -f - <<EOF
            apiVersion: v1
            kind: Secret
            metadata:
              name: mongo-secrets
            type: Opaque
            data:
              MONGO_URI: $(echo -n "${{ secrets.MONGO_URI }}" | base64)
              MONGO_USERNAME: $(echo -n "${{ secrets.MONGO_USERNAME }}" | base64)
              MONGO_PASSWORD: $(echo -n "${{ secrets.MONGO_PASSWORD }}" | base64)
            EOF

        - name: Generate Deployment YAML with Docker image
          run: |
            IMAGE_TAG=${GITHUB_SHA} # or 'latest' for dev
            envsubst < ./kubernetes/deployment.template.yml > ./kubernetes/deployment.yml
          env:
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            IMAGE_TAG: ${{ github.sha }}

        - name: Deploy to EKS
          run: |
            kubectl apply -f deployment.yml
            kubectl apply -f service.yml
          working-directory: ./kubernetes
